const Team = require('../models/team');
const TeamMember = require('../models/teamMember');
const QuestState = require('../models/questState');
const fetch = require('node-fetch');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const handleNewChatMember = async (bot, msg) => {
  const chatId = msg.chat.id;
  console.log(msg);
  
  try {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    if (msg.chat.id.toString() === process.env.ADMIN_CHAT_ID) {
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: "123456789:ABCdefGHIjklMNOpqrsTUVwxyz")
    const botId = parseInt(bot.token.split(':')[0]);
    
    
    //–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ø–∞—á–∫–µ —é–∑–µ—Ä–æ–≤ –Ω–∞—à –±–æ—Ç
    for (const newMember of msg.new_chat_members) {
      if (newMember.id === botId) {
        // –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç - –Ω–∞—Ö–æ–¥–∏–º/—Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        let team = await Team.findOne({ where: { chatId: chatId.toString() } });
        if (team) {
          const oldTitle = team.name;
          await team.update({name: msg.chat.title});

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
          const adminMessage = `‚úçüèº –ö–æ–º–∞–Ω–¥–∞ "${oldTitle}" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∞—Å—å –≤ ${msg.chat.title}`;
          await bot.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage);

          continue;
        }

        team = await Team.create({
          chatId: chatId.toString(),
          name: msg.chat.title,
          isActive: false
        });

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
        // Telegram Bot API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã,
        // –ø–æ—ç—Ç–æ–º—É –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const admins = await bot.getChatAdministrators(chatId);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        for (const admin of admins) {
          if (admin.user.is_bot) continue;

          const initialMember = await TeamMember.findOne({
            where: {
              teamId: team.id,
              userId: newMember.id.toString()
            }
          });

          if (initialMember) {
            continue;
          }
          
          await TeamMember.create({
            teamId: team.id,
            userId: admin.user.id.toString(),
            username: admin.user.username,
            firstName: admin.user.first_name,
            lastName: admin.user.last_name,
            isInitialMember: true
          });
        }

        // @TODO –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ö–µ–ª–ø –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
        await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞. –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n/tasks ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π\n/code <–Ω–æ–º–µ—Ä> <–∫–æ–¥> ‚Äî —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞`);
        return;
      }
    }

    // –ò –∑–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –≤ –ø–∞—á–∫–µ
    for (const newMember of msg.new_chat_members) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
      if (newMember.is_bot) continue;

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
      await addTeamMember(bot, chatId, newMember);
    }
  } catch (error) {
    console.error('Error handling new chat member:', error);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
const handleChatTitleUpdate = async (bot, msg) => {
  const chatId = msg.chat.id;
  const newTitle = msg.new_chat_title;

  try {
    const team = await Team.findOne({ where: { chatId: chatId.toString() } });
    if (!team) {
      console.error(`Chat ${chatId} has no team associated, but renamed to ${newTitle}.`);
    }

    const oldTitle = team.name;
    await team.update({ name: newTitle });
    console.log(`Team name updated for chat ${chatId}: ${newTitle}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    const adminMessage = `‚úçüèº –ö–æ–º–∞–Ω–¥–∞ ¬´${oldTitle}¬ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∞—Å—å –≤ ¬´${newTitle}¬ª`;
    await bot.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage);
  } catch (error) {
    console.error('Error updating team name:', error);
  }
};

const addTeamMember = async (bot, chatId, user) => {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –ø–æ id —á–∞—Ç–∞
    const team = await Team.findOne({ where: { chatId: chatId.toString() } });
    if (!team) {
      console.error(`Chat ${chatId} has no team associated`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingMember = await TeamMember.findOne({
      where: {
        teamId: team.id,
        userId: user.id.toString()
      }
    });

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –≤—ã—Ö–æ–¥–∏–º
    if (existingMember) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–≤–µ—Å—Ç
    const questState = await QuestState.findOne();
    const isQuestActive = questState && questState.isActive;
    const { clubName, clubSlug } = await fetchClubUserData(user.id);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await TeamMember.create({
      teamId: team.id,
      userId: user.id.toString(),
      username: user.username,
      firstName: user.first_name,
      lastName: user.last_name,
      isInitialMember: !isQuestActive,
      clubName: clubName,
      clubSlug: clubSlug
    });

    const isClubMember = clubSlug !== null;
    const clubPresence = isClubMember ? `[${clubName}](https://vas3k.club/user/${clubSlug})` : 'üö® –ù–µ –∏–∑ –∫–ª—É–±–∞!';

    // –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (isQuestActive) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã
      const memberName = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name}`;
      await bot.sendMessage(chatId, `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! ${memberName} (${clubPresence}) –Ω–µ –±—ã–ª –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ –∫–≤–µ—Å—Ç–∞.`, { parse_mode: 'Markdown' });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
      const adminMessage = `‚ö†Ô∏è –í –∫–æ–º–∞–Ω–¥—É ¬´${team.name}¬ª –≤—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ [${memberName}](tg://user?id=${user.id}) ${clubPresence}`;
      await bot.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage, { parse_mode: 'Markdown' });
    }

    return;
  } catch (error) {
    console.error('Error adding team member:', error);
  }

  if (!isClubMember) {
    const memberName = user.username ? `@${user.username}` : `${user.first_name} ${user.last_name}`;
    await bot.sendMessage(chatId, `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! ${memberName} (${clubPresence}) –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª—É–±–µ!`);

    const adminMessage = `‚ö†Ô∏è –í –∫–æ–º–∞–Ω–¥–µ ¬´${team.name}¬ª –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ [${memberName}](tg://user?id=${user.id}), –Ω–µ —Å–æ—Å—Ç–æ—è—â–∏–π –≤ –∫–ª—É–±–µ!`;
    await bot.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage, { parse_mode: 'Markdown' });
  }
};

const handleMessage = async (bot, msg) => {
  const chatId = msg.chat.id;
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
  if (chatId.toString() === process.env.ADMIN_CHAT_ID) {
    return;
  }

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
  if (!msg.from) {
    return;
  }

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
  if (msg.from.is_bot) {
    return;
  }

  try {
    await addTeamMember(bot, chatId, msg.from);
  } catch (error) {
    console.error('Error handling message:', error);
  }
};

const fetchClubUserData = async (telegramId) => {
  let clubName = null;
  let clubSlug = null;

  try {
    const response = await fetch(`https://vas3k.club/user/by_telegram_id/${telegramId}.json`, {
      headers: {
        'X-Service-Token': process.env.VAS3K_TOKEN
      }
    });

    if (response.ok) {
      const userData = await response.json();
      console.log(userData);
      clubName = userData.user.full_name || null;
      clubSlug = userData.user.slug || null;
    } else if (response.status !== 404) {
      console.error(`Error fetching user data from Club API: ${response.status}`);
    }
  } catch (error) {
    console.error('Error calling Club API:', error);
  }

  return { clubName, clubSlug };
};

module.exports = {
  handleNewChatMember,
  handleChatTitleUpdate,
  handleMessage
}; 