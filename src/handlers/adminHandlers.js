const Team = require('../models/team');
const TeamMember = require('../models/teamMember');
const Task = require('../models/task');
const CodeAttempt = require('../models/codeAttempt');
const QuestState = require('../models/questState');
const { Op } = require('sequelize');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
const isAdmin = (chatId) => chatId.toString() === process.env.ADMIN_CHAT_ID;

// –ù–∞—á–∞–ª–æ –∫–≤–µ—Å—Ç–∞
const handleStartQuest = async (bot, msg, args) => {
  if (!isAdmin(msg.chat.id)) return;

  console.log(args);

  try {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ yes, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (!args || args.toLowerCase() !== ' yes') {
      return bot.sendMessage(msg.chat.id, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫ –∫–≤–µ—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start_quest yes');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –∫–≤–µ—Å—Ç
    const currentState = await QuestState.findOne();
    if (currentState && currentState.isActive) {
      return bot.sendMessage(msg.chat.id, '–ö–≤–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!');
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
    const [questState] = await QuestState.findOrCreate({
      where: {},
      defaults: {
        isActive: true,
        startedAt: new Date(),
        endedAt: null
      }
    });

    if (!questState.isActive) {
      await questState.update({
        isActive: true,
        startedAt: new Date(),
        endedAt: null
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    const teams = await Team.findAll();
    
    for (const team of teams) {
      const chatMembers = await bot.getChatAdministrators(team.chatId);
      const members = chatMembers.map(member => ({
        teamId: team.id,
        userId: member.user.id.toString(),
        username: member.user.username,
        firstName: member.user.first_name,
        lastName: member.user.last_name,
        isInitialMember: true
      }));
      
      await TeamMember.bulkCreate(members);
    }

    await bot.sendMessage(msg.chat.id, '–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!');
  } catch (error) {
    console.error('Error starting quest:', error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–≤–µ—Å—Ç–∞');
  }
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–≤–µ—Å—Ç–∞
const handleStopQuest = async (bot, msg, args) => {
  if (!isAdmin(msg.chat.id)) return;

  try {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞ yes, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (!args || args.toLowerCase() !== ' yes') {
      return bot.sendMessage(msg.chat.id, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫–≤–µ—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /stop_quest yes');
    }

    const questState = await QuestState.findOne();
    if (!questState || !questState.isActive) {
      return bot.sendMessage(msg.chat.id, '–ö–≤–µ—Å—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω!');
    }

    await questState.update({
      isActive: false,
      endedAt: new Date()
    });

    await bot.sendMessage(msg.chat.id, '–ö–≤–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.error('Error stopping quest:', error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–≤–µ—Å—Ç–∞');
  }
};

// –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
const handleListTeams = async (bot, msg) => {
  if (!isAdmin(msg.chat.id)) return;

  try {
    const teams = await Team.findAll({
      include: [{
        model: TeamMember,
        attributes: ['id']
      }]
    });
    
    const teamList = teams.map(team => {
      const memberCount = team.teamMembers.length;
      return `${team.id}. ${team.name} (${memberCount} –∏–≥—Ä–æ–∫–æ–≤)`;
    }).join('\n');
    
    await bot.sendMessage(msg.chat.id, `–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n${teamList}`);
  } catch (error) {
    console.error('Error listing teams:', error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥');
  }
};

// –î–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã
const handleTeamDetails = async (bot, msg, teamId) => {
  if (!isAdmin(msg.chat.id)) return;

  try {
    const team = await Team.findByPk(teamId);
    if (!team) {
      return bot.sendMessage(msg.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const members = await TeamMember.findAll({ where: { teamId } });
    const memberList = members.map(member => {
      const clubPresence = member.clubSlug !== null ? `[${member.clubName}](https://vas3k.club/user/${member.clubSlug})` : 'üö® –Ω–µ –≤ –∫–ª—É–±–µ!'
      const name = `[${member.firstName} ${member.lastName}](tg://user?id=${member.userId})`;
      return `${name} (${clubPresence})${member.isInitialMember ? '‚úÖ' : '‚ö†Ô∏è'}`;
    }).join('\n');

    await bot.sendMessage(msg.chat.id, `–ö–æ–º–∞–Ω–¥–∞: ${team.name}\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n${memberList}`, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error getting team details:', error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ');
  }
};

// –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
const handleBroadcast = async (bot, msg, message) => {
  if (!isAdmin(msg.chat.id)) return;

  try {
    const teams = await Team.findAll();
    for (const team of teams) {
      await bot.sendMessage(team.chatId, message);
    }
    await bot.sendMessage(msg.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º');
  } catch (error) {
    console.error('Error broadcasting message:', error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
};

// –ó–∞–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
const handleTeamTasks = async (bot, msg, teamId) => {
  if (!isAdmin(msg.chat.id)) return;

  try {
    const team = await Team.findByPk(teamId);
    if (!team) {
      return bot.sendMessage(msg.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const tasks = await Task.findAll({ 
      order: [['order', 'ASC']],
      include: [{
        model: CodeAttempt,
        where: { teamId },
        required: false,
        order: [['createdAt', 'DESC']],
        limit: 1
      }]
    });

    let correctPoints = 0;
    let correctCount = 0;
    let lastCodeTime = null;

    const taskList = tasks.map(task => {
      const lastAttempt = task.codeAttempts?.[0];
      let line = `${task.order}. ${task.title}\n–ë–∞–ª–ª—ã: ${task.cost}\n`;
      
      if (lastAttempt) {
        if (task.taskType === 'photo') {
          line += `üì∏ –ü—Ä–∏–Ω—è—Ç–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n`;
        } else {
          const status = lastAttempt.isCorrect ? '‚úÖ' : '‚ùå';
          const code = lastAttempt.code.replace(/`/g, '\\`');
          const correctCode = task.correctCode.replace(/`/g, '\\`');
          line += `${status} \`${code}\` / \`${correctCode}\``;
        
          if (lastAttempt.isCorrect) {
            correctCount++;
            correctPoints += task.cost;
          }
        }

        if (lastAttempt.createdAt > lastCodeTime) {
          lastCodeTime = lastAttempt.createdAt;
        }
      } else {
        const correctCode = task.correctCode?.replace(/`/g, '\\`');
        line += `üö´ –Ω–µ —Å–¥–∞–≤–∞–ª–∏ / \`${correctCode}\``;
      }
      
      return line;
    }).join('\n\n');


    const photosUrl = `https://${process.env.PHOTOS_DOMAIN}/${process.env.PHOTOS_SECRET_PATH}/${teamId}/`;
    const photosMessage = `\nüì∏ [–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ–º–∞–Ω–¥—ã](${photosUrl})`;

    await bot.sendMessage(
      msg.chat.id,
      `*–ó–∞–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ¬´${team.name}¬ª*\n\n${taskList}\n\n*–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:* ${correctCount}\n*–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª:* ${correctPoints}\n–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–∞—á–∞: ${lastCodeTime}\n${photosMessage}`,
      { parse_mode: 'Markdown' },
    );
  } catch (error) {
    console.error('Error getting team tasks:', error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏—è—Ö');
  }
};

module.exports = {
  handleStartQuest,
  handleStopQuest,
  handleListTeams,
  handleTeamDetails,
  handleBroadcast,
  handleTeamTasks
}; 