const sequelize = require('./database');
const team = require('../models/team');
const teamMember = require('../models/teamMember');
const task = require('../models/task');
const codeAttempt = require('../models/codeAttempt');
const questState = require('../models/questState');
const questSettings = require('../models/questSetting');

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
const defineRelations = () => {
  // –°–≤—è–∑–∏ –¥–ª—è Team
  team.hasMany(teamMember, { foreignKey: 'teamId' });
  teamMember.belongsTo(team, { foreignKey: 'teamId' });

  // –°–≤—è–∑–∏ –¥–ª—è Task
  task.hasMany(codeAttempt, { foreignKey: 'taskId' });
  codeAttempt.belongsTo(task, { foreignKey: 'taskId' });

  // –°–≤—è–∑–∏ –¥–ª—è Team
  team.hasMany(codeAttempt, { foreignKey: 'teamId' });
  codeAttempt.belongsTo(team, { foreignKey: 'teamId' });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const initDatabase = async () => {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
    defineRelations();

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await team.sync();
    await task.sync();
    await teamMember.sync();
    await codeAttempt.sync();
    await questState.sync();
    await questSettings.sync();

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–µ—Å—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const initQuestState = await questState.findOne();
    if (!initQuestState) {
      await questState.create({
        isActive: false,
        startedAt: null,
        endedAt: null
      });
    }

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ö–µ–¥–µ—Ä –∏ —Ñ—É—Ç–µ—Ä –¥–ª—è –∫–≤–µ—Å—Ç–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const headerSetting = await questSettings.findOne({ where: { key: 'header' } });
    if (!headerSetting) {
      await questSettings.create({
        key: 'header',
        value: `üéÆ *–ö–≤–µ—Å—Ç*\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–µ—Å—Ç! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π.`,        
      });
    }

    const footerSetting = await questSettings.findOne({ where: { key: 'footer' } });
    if (!footerSetting) {
      await questSettings.create({
        key: 'footer',
        value: `_–ì–∞–ª–æ—á–∫–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –∫–≤–µ—Å—Ç–∞ –∏ –≤—Å–µ—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π._`,
      });
    }

    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Error initializing database:', error);
    throw error;
  }
};

module.exports = initDatabase; 